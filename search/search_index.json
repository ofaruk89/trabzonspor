{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Trabzonspor TS CLI Installation $ pip install trabzonspor Usage Main Page ```shell summary $ trabzonspor ![](docs/main.png) List of Players ```shell footballers $ trabzonspor -kadro List of Top Scorers shell footballers $ trabzonspor -stats","title":"Home"},{"location":"#trabzonspor","text":"TS CLI","title":"Trabzonspor"},{"location":"#installation","text":"$ pip install trabzonspor","title":"Installation"},{"location":"#usage","text":"Main Page ```shell summary $ trabzonspor ![](docs/main.png) List of Players ```shell footballers $ trabzonspor -kadro List of Top Scorers shell footballers $ trabzonspor -stats","title":"Usage"},{"location":"docs/","text":"Trabzonspor Trabzonspor CLI! Installation $ pip install trabzonspor Usage Main Page $ trabzonspor List of Players $ trabzonspor -kadro List of Top Scorers $ trabzonspor -stats","title":"Index"},{"location":"docs/#trabzonspor","text":"Trabzonspor CLI!","title":"Trabzonspor"},{"location":"docs/#installation","text":"$ pip install trabzonspor","title":"Installation"},{"location":"docs/#usage","text":"Main Page $ trabzonspor List of Players $ trabzonspor -kadro List of Top Scorers $ trabzonspor -stats","title":"Usage"},{"location":"reference/trabzonspor/","text":"Module trabzonspor Sub-modules trabzonspor.cli trabzonspor.scrapper trabzonspor.screen","title":"Index"},{"location":"reference/trabzonspor/#module-trabzonspor","text":"","title":"Module trabzonspor"},{"location":"reference/trabzonspor/#sub-modules","text":"trabzonspor.cli trabzonspor.scrapper trabzonspor.screen","title":"Sub-modules"},{"location":"reference/trabzonspor/cli/","text":"Module trabzonspor.cli View Source from .screen import Application , Footballers , Stats import argparse def main (): parser = argparse . ArgumentParser ( description = 'Trabzonspor ClI' ) parser . add_argument ( '--kadro' , action = 'store_true' , help = 'Trabzonspor Squad' ) parser . add_argument ( '--stats' , action = 'store_true' , help = 'Top Scorers' ) args = parser . parse_args () if args . kadro is False and args . stats is False : try : screen = Application () screen . setup () screen . run () except KeyboardInterrupt : pass except Exception as ex : print ( ex ) if args . kadro : try : screen = Footballers () screen . setup () screen . run () except KeyboardInterrupt : pass except Exception as ex : print ( ex ) if args . stats : try : screen = Stats () screen . setup () screen . run () except KeyboardInterrupt : pass except Exception as ex : print ( ex ) Functions main def main ( ) View Source def main(): parser = argparse.ArgumentParser(description='Trabzonspor ClI') parser.add_argument('--kadro', action='store_true', help='Trabzonspor Squad') parser.add_argument('--stats', action='store_true', help='Top Scorers') args = parser.parse_args() if args.kadro is False and args.stats is False: try: screen = Application() screen.setup() screen.run() except KeyboardInterrupt: pass except Exception as ex: print(ex) if args.kadro: try: screen = Footballers() screen.setup() screen.run() except KeyboardInterrupt: pass except Exception as ex: print(ex) if args.stats: try: screen = Stats() screen.setup() screen.run() except KeyboardInterrupt: pass except Exception as ex: print(ex)","title":"CLI"},{"location":"reference/trabzonspor/cli/#module-trabzonsporcli","text":"View Source from .screen import Application , Footballers , Stats import argparse def main (): parser = argparse . ArgumentParser ( description = 'Trabzonspor ClI' ) parser . add_argument ( '--kadro' , action = 'store_true' , help = 'Trabzonspor Squad' ) parser . add_argument ( '--stats' , action = 'store_true' , help = 'Top Scorers' ) args = parser . parse_args () if args . kadro is False and args . stats is False : try : screen = Application () screen . setup () screen . run () except KeyboardInterrupt : pass except Exception as ex : print ( ex ) if args . kadro : try : screen = Footballers () screen . setup () screen . run () except KeyboardInterrupt : pass except Exception as ex : print ( ex ) if args . stats : try : screen = Stats () screen . setup () screen . run () except KeyboardInterrupt : pass except Exception as ex : print ( ex )","title":"Module trabzonspor.cli"},{"location":"reference/trabzonspor/cli/#functions","text":"","title":"Functions"},{"location":"reference/trabzonspor/cli/#main","text":"def main ( ) View Source def main(): parser = argparse.ArgumentParser(description='Trabzonspor ClI') parser.add_argument('--kadro', action='store_true', help='Trabzonspor Squad') parser.add_argument('--stats', action='store_true', help='Top Scorers') args = parser.parse_args() if args.kadro is False and args.stats is False: try: screen = Application() screen.setup() screen.run() except KeyboardInterrupt: pass except Exception as ex: print(ex) if args.kadro: try: screen = Footballers() screen.setup() screen.run() except KeyboardInterrupt: pass except Exception as ex: print(ex) if args.stats: try: screen = Stats() screen.setup() screen.run() except KeyboardInterrupt: pass except Exception as ex: print(ex)","title":"main"},{"location":"reference/trabzonspor/scrapper/","text":"Module trabzonspor.scrapper View Source import requests from bs4 import BeautifulSoup class Scraper : def __init__ ( self ): self . session = requests . Session () self . session . headers . update ( { \"User-Agent\" : ( \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6)\" \" AppleWebKit/537.36 (KHTML, like Gecko)\" \" Chrome/53.0.2785.143 Safari/537.36\" ), \"Accept-Encoding\" : \"gzip, deflate\" , \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\" , \"DNT\" : \"1\" , \"Connection\" : \"keep-alive\" , \"Upgrade-Insecure-Requests\" : \"1\" } ) response = self . session . get ( url = \"https://www.transfermarkt.com.tr/trabzonspor/startseite/verein/449\" ) self . soup = BeautifulSoup ( response . content , \"html.parser\" ) @property def matches ( self ): return self . session . get ( \"https://www.transfermarkt.com.tr/ceapi/nextMatches/team/449\" ) . json () @property def rumors ( self ): return self . session . get ( \"https://www.transfermarkt.com.tr/ceapi/rumors/team/449\" ) . json ()[ \"rumors\" ] @property def team_value ( self ): data = self . soup . select_one ( \"a.data-header__market-value-wrapper\" ) data . select_one ( \"p\" ) . clear () return data . get_text ( strip = True ) @property def cups ( self ): cups = [] for each in self . soup . select ( \".data-header__badge-container a\" ): cups . append ( [ each . select_one ( \"span\" ) . get_text ( strip = True ), each . get ( \"title\" ), ] ) return cups @property def standings ( self ): standings = [] table = self . soup . find_all ( lambda tag : tag . name == \"div\" and tag . get ( \"class\" ) == [ \"box\" ])[ 1 ] for each in table . select ( \"tbody tr\" ): n , _ , c , m , a , p = each . select ( \"td\" ) row = [ n . get_text ( strip = True ), # no c . get_text ( strip = True ), # club m . get_text ( strip = True ), # matches a . get_text ( strip = True ), # average p . get_text ( strip = True ), # points \"table-highlight\" in each . attrs . get ( \"class\" , []) # highlight ] standings . append ( row ) return standings @property def truths ( self ): table = self . soup . find ( \"div\" , class_ = \"box daten-und-fakten-verein\" ) truths = { \"legal_name\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"legalName\" }) . get_text ( strip = True ), \"address\" : \" \" . join ([ i . get_text ( strip = True ) for i in table . find_all ( \"div\" , attrs = { \"itemprop\" : \"address\" })]), \"telephone\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"telephone\" }) . get_text ( strip = True ), \"fax\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"faxNumber\" }) . get_text ( strip = True ), \"url\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"url\" }) . get_text ( strip = True ), \"founded\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"foundingDate\" }) . get_text ( strip = True ), \"members\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"member\" }) . get_text ( strip = True ) } return truths @property def players ( self ): table = self . soup . find ( 'table' , attrs = { 'class' : 'items' }) player = [] players = table . find_all ( 'img' , attrs = { 'class' : \"bilderrahmen-fixed lazy lazy\" }) for row in players : player . append ( str ( str ( row ) . split ( '\" class' , 1 )[ 0 ] . split ( '<img alt=\"' , 1 )[ 1 ])) position = [] pos = [ i . find_all ( 'td' )[ - 1 ] for i in table . find_all ( 'table' , attrs = { 'class' : 'inline-table' })] for i in range ( 0 , len ( pos ), 1 ): position . append ( str ( pos [ i ]) . replace ( \" \" , \"\" ) . split ( '>' , 1 )[ 1 ] . split ( '<' , 1 )[ 0 ] . replace ( \" \\n \" , \"\" )) market_value = [] money = table . find_all ( 'td' , attrs = { 'class' : [ \"rechts\" ]}) for i in range ( 0 , len ( money ), 1 ): market_value . append ( str ( money [ i ]) . split ( '>' , 2 )[ 2 ] . split ( '<' , 1 )[ 0 ]) age = [] ages = table . find_all ( 'td' , attrs = { 'class' : 'zentriert' }) for i in range ( 1 , len ( ages ), 3 ): age . append ( str ( ages [ i ]) . split ( \">\" , 1 )[ 1 ] . split ( \"<\" , 1 )[ 0 ]) players = { \"Player\" : player , \"Age\" : age , \"Position\" : position , \"Market Value\" : market_value } return players @property def goals ( self ): table = self . soup . find ( 'div' , attrs = { 'data-viewport' : 'TopTorschuetzen' }) players = table . select ( 'span' , attrs = { 'class' : \"spielername\" }) goals = table . select ( 'td' , attrs = { 'class' : \"zentriert tore\" }) player = [] position = [] goal = [] for i in range ( 0 , len ( players ), 2 ): player . append ( players [ i ] . get_text ( strip = True )) position . append ( players [ i + 1 ] . get_text ( strip = True )) for each in range ( 2 , len ( goals ), 3 ): goal . append ( goals [ each ] . get_text ( strip = True )) goaller = { \"Player\" : player , \"Position\" : position , \"Goals\" : goal } return goaller @property def assists ( self ): table = self . soup . find ( 'div' , attrs = { 'data-viewport' : 'TopVorlagengeber' }) players = table . select ( 'span' , attrs = { 'class' : \"spielername\" }) goals = table . select ( 'td' , attrs = { 'class' : \"zentriert tore\" }) player = [] position = [] goal = [] for i in range ( 0 , len ( players ), 2 ): player . append ( players [ i ] . get_text ( strip = True )) position . append ( players [ i + 1 ] . get_text ( strip = True )) for each in range ( 2 , len ( goals ), 3 ): goal . append ( goals [ each ] . get_text ( strip = True )) assistant = { \"Player\" : player , \"Position\" : position , \"Assists\" : goal } return assistant Classes Scraper class Scraper ( ) View Source class Scraper : def __init__ ( self ) : self . session = requests . Session () self . session . headers . update ( { \"User-Agent\" : ( \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6)\" \" AppleWebKit/537.36 (KHTML, like Gecko)\" \" Chrome/53.0.2785.143 Safari/537.36\" ), \"Accept-Encoding\" : \"gzip, deflate\" , \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\" , \"DNT\" : \"1\" , \"Connection\" : \"keep-alive\" , \"Upgrade-Insecure-Requests\" : \"1\" } ) response = self . session . get ( url = \"https://www.transfermarkt.com.tr/trabzonspor/startseite/verein/449\" ) self . soup = BeautifulSoup ( response . content , \"html.parser\" ) @property def matches ( self ) : return self . session . get ( \"https://www.transfermarkt.com.tr/ceapi/nextMatches/team/449\" ). json () @property def rumors ( self ) : return self . session . get ( \"https://www.transfermarkt.com.tr/ceapi/rumors/team/449\" ). json () [ \"rumors\" ] @property def team_value ( self ) : data = self . soup . select_one ( \"a.data-header__market-value-wrapper\" ) data . select_one ( \"p\" ). clear () return data . get_text ( strip = True ) @property def cups ( self ) : cups = [] for each in self . soup . select ( \".data-header__badge-container a\" ) : cups . append ( [ each.select_one(\"span\").get_text(strip=True), each.get(\"title\"), ] ) return cups @property def standings ( self ) : standings = [] table = self . soup . find_all ( lambda tag : tag . name == \"div\" and tag . get ( \"class\" ) == [ \"box\" ] ) [ 1 ] for each in table . select ( \"tbody tr\" ) : n , _ , c , m , a , p = each . select ( \"td\" ) row = [ n.get_text(strip=True), # no c.get_text(strip=True), # club m.get_text(strip=True), # matches a.get_text(strip=True), # average p.get_text(strip=True), # points \"table-highlight\" in each.attrs.get(\"class\", [ ] ) # highlight ] standings . append ( row ) return standings @property def truths ( self ) : table = self . soup . find ( \"div\" , class_ = \"box daten-und-fakten-verein\" ) truths = { \"legal_name\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"legalName\" } ). get_text ( strip = True ), \"address\" : \" \" . join ( [ i.get_text(strip=True) for i in table.find_all(\"div\", attrs={\"itemprop\": \"address\"}) ] ), \"telephone\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"telephone\" } ). get_text ( strip = True ), \"fax\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"faxNumber\" } ). get_text ( strip = True ), \"url\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"url\" } ). get_text ( strip = True ), \"founded\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"foundingDate\" } ). get_text ( strip = True ), \"members\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"member\" } ). get_text ( strip = True ) } return truths @property def players ( self ) : table = self . soup . find ( 'table' , attrs = { 'class' : 'items' } ) player = [] players = table . find_all ( 'img' , attrs = { 'class' : \"bilderrahmen-fixed lazy lazy\" } ) for row in players : player . append ( str ( str ( row ). split ( '\" class' , 1 ) [ 0 ] . split ( '<img alt=\"' , 1 ) [ 1 ] )) position = [] pos = [ i.find_all('td')[-1 ] for i in table . find_all ( 'table' , attrs = { 'class' : 'inline-table' } ) ] for i in range ( 0 , len ( pos ), 1 ) : position . append ( str ( pos [ i ] ). replace ( \" \" , \"\" ). split ( '>' , 1 ) [ 1 ] . split ( '<' , 1 ) [ 0 ] . replace ( \"\\n\" , \"\" )) market_value = [] money = table . find_all ( 'td' , attrs = { 'class' : [ \"rechts\" ] } ) for i in range ( 0 , len ( money ), 1 ) : market_value . append ( str ( money [ i ] ). split ( '>' , 2 ) [ 2 ] . split ( '<' , 1 ) [ 0 ] ) age = [] ages = table . find_all ( 'td' , attrs = { 'class' : 'zentriert' } ) for i in range ( 1 , len ( ages ), 3 ) : age . append ( str ( ages [ i ] ). split ( \">\" , 1 ) [ 1 ] . split ( \"<\" , 1 ) [ 0 ] ) players = { \"Player\" : player , \"Age\" : age , \"Position\" : position , \"Market Value\" : market_value } return players @property def goals ( self ) : table = self . soup . find ( 'div' , attrs = { 'data-viewport' : 'TopTorschuetzen' } ) players = table . select ( 'span' , attrs = { 'class' : \"spielername\" } ) goals = table . select ( 'td' , attrs = { 'class' : \"zentriert tore\" } ) player = [] position = [] goal = [] for i in range ( 0 , len ( players ), 2 ) : player . append ( players [ i ] . get_text ( strip = True )) position . append ( players [ i+1 ] . get_text ( strip = True )) for each in range ( 2 , len ( goals ), 3 ) : goal . append ( goals [ each ] . get_text ( strip = True )) goaller = { \"Player\" : player , \"Position\" : position , \"Goals\" : goal } return goaller @property def assists ( self ) : table = self . soup . find ( 'div' , attrs = { 'data-viewport' : 'TopVorlagengeber' } ) players = table . select ( 'span' , attrs = { 'class' : \"spielername\" } ) goals = table . select ( 'td' , attrs = { 'class' : \"zentriert tore\" } ) player = [] position = [] goal = [] for i in range ( 0 , len ( players ), 2 ) : player . append ( players [ i ] . get_text ( strip = True )) position . append ( players [ i + 1 ] . get_text ( strip = True )) for each in range ( 2 , len ( goals ), 3 ) : goal . append ( goals [ each ] . get_text ( strip = True )) assistant = { \"Player\" : player , \"Position\" : position , \"Assists\" : goal } return assistant Instance variables assists cups goals matches players rumors standings team_value truths","title":"Scrapper"},{"location":"reference/trabzonspor/scrapper/#module-trabzonsporscrapper","text":"View Source import requests from bs4 import BeautifulSoup class Scraper : def __init__ ( self ): self . session = requests . Session () self . session . headers . update ( { \"User-Agent\" : ( \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6)\" \" AppleWebKit/537.36 (KHTML, like Gecko)\" \" Chrome/53.0.2785.143 Safari/537.36\" ), \"Accept-Encoding\" : \"gzip, deflate\" , \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\" , \"DNT\" : \"1\" , \"Connection\" : \"keep-alive\" , \"Upgrade-Insecure-Requests\" : \"1\" } ) response = self . session . get ( url = \"https://www.transfermarkt.com.tr/trabzonspor/startseite/verein/449\" ) self . soup = BeautifulSoup ( response . content , \"html.parser\" ) @property def matches ( self ): return self . session . get ( \"https://www.transfermarkt.com.tr/ceapi/nextMatches/team/449\" ) . json () @property def rumors ( self ): return self . session . get ( \"https://www.transfermarkt.com.tr/ceapi/rumors/team/449\" ) . json ()[ \"rumors\" ] @property def team_value ( self ): data = self . soup . select_one ( \"a.data-header__market-value-wrapper\" ) data . select_one ( \"p\" ) . clear () return data . get_text ( strip = True ) @property def cups ( self ): cups = [] for each in self . soup . select ( \".data-header__badge-container a\" ): cups . append ( [ each . select_one ( \"span\" ) . get_text ( strip = True ), each . get ( \"title\" ), ] ) return cups @property def standings ( self ): standings = [] table = self . soup . find_all ( lambda tag : tag . name == \"div\" and tag . get ( \"class\" ) == [ \"box\" ])[ 1 ] for each in table . select ( \"tbody tr\" ): n , _ , c , m , a , p = each . select ( \"td\" ) row = [ n . get_text ( strip = True ), # no c . get_text ( strip = True ), # club m . get_text ( strip = True ), # matches a . get_text ( strip = True ), # average p . get_text ( strip = True ), # points \"table-highlight\" in each . attrs . get ( \"class\" , []) # highlight ] standings . append ( row ) return standings @property def truths ( self ): table = self . soup . find ( \"div\" , class_ = \"box daten-und-fakten-verein\" ) truths = { \"legal_name\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"legalName\" }) . get_text ( strip = True ), \"address\" : \" \" . join ([ i . get_text ( strip = True ) for i in table . find_all ( \"div\" , attrs = { \"itemprop\" : \"address\" })]), \"telephone\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"telephone\" }) . get_text ( strip = True ), \"fax\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"faxNumber\" }) . get_text ( strip = True ), \"url\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"url\" }) . get_text ( strip = True ), \"founded\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"foundingDate\" }) . get_text ( strip = True ), \"members\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"member\" }) . get_text ( strip = True ) } return truths @property def players ( self ): table = self . soup . find ( 'table' , attrs = { 'class' : 'items' }) player = [] players = table . find_all ( 'img' , attrs = { 'class' : \"bilderrahmen-fixed lazy lazy\" }) for row in players : player . append ( str ( str ( row ) . split ( '\" class' , 1 )[ 0 ] . split ( '<img alt=\"' , 1 )[ 1 ])) position = [] pos = [ i . find_all ( 'td' )[ - 1 ] for i in table . find_all ( 'table' , attrs = { 'class' : 'inline-table' })] for i in range ( 0 , len ( pos ), 1 ): position . append ( str ( pos [ i ]) . replace ( \" \" , \"\" ) . split ( '>' , 1 )[ 1 ] . split ( '<' , 1 )[ 0 ] . replace ( \" \\n \" , \"\" )) market_value = [] money = table . find_all ( 'td' , attrs = { 'class' : [ \"rechts\" ]}) for i in range ( 0 , len ( money ), 1 ): market_value . append ( str ( money [ i ]) . split ( '>' , 2 )[ 2 ] . split ( '<' , 1 )[ 0 ]) age = [] ages = table . find_all ( 'td' , attrs = { 'class' : 'zentriert' }) for i in range ( 1 , len ( ages ), 3 ): age . append ( str ( ages [ i ]) . split ( \">\" , 1 )[ 1 ] . split ( \"<\" , 1 )[ 0 ]) players = { \"Player\" : player , \"Age\" : age , \"Position\" : position , \"Market Value\" : market_value } return players @property def goals ( self ): table = self . soup . find ( 'div' , attrs = { 'data-viewport' : 'TopTorschuetzen' }) players = table . select ( 'span' , attrs = { 'class' : \"spielername\" }) goals = table . select ( 'td' , attrs = { 'class' : \"zentriert tore\" }) player = [] position = [] goal = [] for i in range ( 0 , len ( players ), 2 ): player . append ( players [ i ] . get_text ( strip = True )) position . append ( players [ i + 1 ] . get_text ( strip = True )) for each in range ( 2 , len ( goals ), 3 ): goal . append ( goals [ each ] . get_text ( strip = True )) goaller = { \"Player\" : player , \"Position\" : position , \"Goals\" : goal } return goaller @property def assists ( self ): table = self . soup . find ( 'div' , attrs = { 'data-viewport' : 'TopVorlagengeber' }) players = table . select ( 'span' , attrs = { 'class' : \"spielername\" }) goals = table . select ( 'td' , attrs = { 'class' : \"zentriert tore\" }) player = [] position = [] goal = [] for i in range ( 0 , len ( players ), 2 ): player . append ( players [ i ] . get_text ( strip = True )) position . append ( players [ i + 1 ] . get_text ( strip = True )) for each in range ( 2 , len ( goals ), 3 ): goal . append ( goals [ each ] . get_text ( strip = True )) assistant = { \"Player\" : player , \"Position\" : position , \"Assists\" : goal } return assistant","title":"Module trabzonspor.scrapper"},{"location":"reference/trabzonspor/scrapper/#classes","text":"","title":"Classes"},{"location":"reference/trabzonspor/scrapper/#scraper","text":"class Scraper ( ) View Source class Scraper : def __init__ ( self ) : self . session = requests . Session () self . session . headers . update ( { \"User-Agent\" : ( \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6)\" \" AppleWebKit/537.36 (KHTML, like Gecko)\" \" Chrome/53.0.2785.143 Safari/537.36\" ), \"Accept-Encoding\" : \"gzip, deflate\" , \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\" , \"DNT\" : \"1\" , \"Connection\" : \"keep-alive\" , \"Upgrade-Insecure-Requests\" : \"1\" } ) response = self . session . get ( url = \"https://www.transfermarkt.com.tr/trabzonspor/startseite/verein/449\" ) self . soup = BeautifulSoup ( response . content , \"html.parser\" ) @property def matches ( self ) : return self . session . get ( \"https://www.transfermarkt.com.tr/ceapi/nextMatches/team/449\" ). json () @property def rumors ( self ) : return self . session . get ( \"https://www.transfermarkt.com.tr/ceapi/rumors/team/449\" ). json () [ \"rumors\" ] @property def team_value ( self ) : data = self . soup . select_one ( \"a.data-header__market-value-wrapper\" ) data . select_one ( \"p\" ). clear () return data . get_text ( strip = True ) @property def cups ( self ) : cups = [] for each in self . soup . select ( \".data-header__badge-container a\" ) : cups . append ( [ each.select_one(\"span\").get_text(strip=True), each.get(\"title\"), ] ) return cups @property def standings ( self ) : standings = [] table = self . soup . find_all ( lambda tag : tag . name == \"div\" and tag . get ( \"class\" ) == [ \"box\" ] ) [ 1 ] for each in table . select ( \"tbody tr\" ) : n , _ , c , m , a , p = each . select ( \"td\" ) row = [ n.get_text(strip=True), # no c.get_text(strip=True), # club m.get_text(strip=True), # matches a.get_text(strip=True), # average p.get_text(strip=True), # points \"table-highlight\" in each.attrs.get(\"class\", [ ] ) # highlight ] standings . append ( row ) return standings @property def truths ( self ) : table = self . soup . find ( \"div\" , class_ = \"box daten-und-fakten-verein\" ) truths = { \"legal_name\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"legalName\" } ). get_text ( strip = True ), \"address\" : \" \" . join ( [ i.get_text(strip=True) for i in table.find_all(\"div\", attrs={\"itemprop\": \"address\"}) ] ), \"telephone\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"telephone\" } ). get_text ( strip = True ), \"fax\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"faxNumber\" } ). get_text ( strip = True ), \"url\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"url\" } ). get_text ( strip = True ), \"founded\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"foundingDate\" } ). get_text ( strip = True ), \"members\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"member\" } ). get_text ( strip = True ) } return truths @property def players ( self ) : table = self . soup . find ( 'table' , attrs = { 'class' : 'items' } ) player = [] players = table . find_all ( 'img' , attrs = { 'class' : \"bilderrahmen-fixed lazy lazy\" } ) for row in players : player . append ( str ( str ( row ). split ( '\" class' , 1 ) [ 0 ] . split ( '<img alt=\"' , 1 ) [ 1 ] )) position = [] pos = [ i.find_all('td')[-1 ] for i in table . find_all ( 'table' , attrs = { 'class' : 'inline-table' } ) ] for i in range ( 0 , len ( pos ), 1 ) : position . append ( str ( pos [ i ] ). replace ( \" \" , \"\" ). split ( '>' , 1 ) [ 1 ] . split ( '<' , 1 ) [ 0 ] . replace ( \"\\n\" , \"\" )) market_value = [] money = table . find_all ( 'td' , attrs = { 'class' : [ \"rechts\" ] } ) for i in range ( 0 , len ( money ), 1 ) : market_value . append ( str ( money [ i ] ). split ( '>' , 2 ) [ 2 ] . split ( '<' , 1 ) [ 0 ] ) age = [] ages = table . find_all ( 'td' , attrs = { 'class' : 'zentriert' } ) for i in range ( 1 , len ( ages ), 3 ) : age . append ( str ( ages [ i ] ). split ( \">\" , 1 ) [ 1 ] . split ( \"<\" , 1 ) [ 0 ] ) players = { \"Player\" : player , \"Age\" : age , \"Position\" : position , \"Market Value\" : market_value } return players @property def goals ( self ) : table = self . soup . find ( 'div' , attrs = { 'data-viewport' : 'TopTorschuetzen' } ) players = table . select ( 'span' , attrs = { 'class' : \"spielername\" } ) goals = table . select ( 'td' , attrs = { 'class' : \"zentriert tore\" } ) player = [] position = [] goal = [] for i in range ( 0 , len ( players ), 2 ) : player . append ( players [ i ] . get_text ( strip = True )) position . append ( players [ i+1 ] . get_text ( strip = True )) for each in range ( 2 , len ( goals ), 3 ) : goal . append ( goals [ each ] . get_text ( strip = True )) goaller = { \"Player\" : player , \"Position\" : position , \"Goals\" : goal } return goaller @property def assists ( self ) : table = self . soup . find ( 'div' , attrs = { 'data-viewport' : 'TopVorlagengeber' } ) players = table . select ( 'span' , attrs = { 'class' : \"spielername\" } ) goals = table . select ( 'td' , attrs = { 'class' : \"zentriert tore\" } ) player = [] position = [] goal = [] for i in range ( 0 , len ( players ), 2 ) : player . append ( players [ i ] . get_text ( strip = True )) position . append ( players [ i + 1 ] . get_text ( strip = True )) for each in range ( 2 , len ( goals ), 3 ) : goal . append ( goals [ each ] . get_text ( strip = True )) assistant = { \"Player\" : player , \"Position\" : position , \"Assists\" : goal } return assistant","title":"Scraper"},{"location":"reference/trabzonspor/scrapper/#instance-variables","text":"assists cups goals matches players rumors standings team_value truths","title":"Instance variables"},{"location":"reference/trabzonspor/screen/","text":"Module trabzonspor.screen View Source from datetime import datetime from time import sleep from rich import box from rich.align import Align from rich.console import Group from rich.layout import Layout from rich.live import Live from rich.panel import Panel from rich.table import Table from rich.text import Text from .scrapper import Scraper class Application : def __init__ ( self ): self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"header\" , ratio = 3 ), Layout ( name = \"main\" , ratio = 12 ), Layout ( name = \"footer\" , ratio = 1 ), ) self . layout [ \"header\" ] . split_row ( Layout ( name = \"header-left\" , ratio = 1 ), Layout ( name = \"header-middle\" , ratio = 3 ), Layout ( name = \"header-right\" , ratio = 1 ), ) self . layout [ \"main\" ] . split_row ( Layout ( name = \"main-left\" , ratio = 1 ), Layout ( name = \"main-middle\" , ratio = 1 ), Layout ( name = \"main-right\" , ratio = 1 ) ) def setup ( self ): self . layout [ \"header-left\" ] . update ( self . get_header_left ()) self . layout [ \"header-middle\" ] . update ( self . get_header_middle ()) self . layout [ \"header-right\" ] . update ( self . get_header_right ()) self . layout [ \"main-left\" ] . update ( self . get_main_left ()) self . layout [ \"main-middle\" ] . update ( self . get_main_middle ()) self . layout [ \"main-right\" ] . update ( self . get_main_right ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ): with Live ( self . layout , screen = True ): while True : sleep ( 1 ) def get_header_left ( self ): cups = Table . grid ( expand = True ) cups . add_column ( style = \"bold\" ) cups . add_column () cups . add_column () for count , title in self . scrapper . cups : cups . add_row ( count , \" \" , title ) return Panel ( Align . center ( cups , vertical = \"middle\" )) @staticmethod def get_header_middle (): logo = Group ( Align . center ( \":star: \\n \" ), Align . center ( \"[dark_red]TRABZON[/dark_red][dodger_blue1]SPOR[/dodger_blue1] \\n \" ), Align . center ( \"1967\" ), ) return Panel ( Align . center ( logo , vertical = \"middle\" ), style = \"bold\" , padding = 1 ) def get_header_right ( self ): return Panel ( Align . center ( f \"Kadro de\u011feri \\n [b] { self . scrapper . team_value } [/b]\" , vertical = \"middle\" )) def get_main_left_top ( self ): standings = Table ( expand = True , box = box . SIMPLE ) standings . add_column ( header = \"#\" ) standings . add_column ( header = \"Kul\u00fcp\" ) standings . add_column ( header = \"Ma\u00e7lar\" ) standings . add_column ( header = \"+/-\" ) standings . add_column ( header = \"Puan\" ) for no , club , matches , average , points , highlight in self . scrapper . standings : style = \"u dodger_blue1 on dark_red\" if highlight else None standings . add_row ( no , club , matches , average , points , style = style ) return Panel ( standings , title = \"[cyan][b]TABLO KES\u0130T\u0130 S\u00dcPER L\u0130G[/b][/cyan]\" , box = box . SQUARE ) def get_main_left_bottom ( self ): truths = Table . grid ( expand = True ) truths . add_column () truths . add_column () truths . add_column () tr = self . scrapper . truths truths . add_row ( \"Resmi kul\u00fcp ad\u0131\" , \": \" , tr [ \"legal_name\" ]) truths . add_row ( \"Adres\" , \": \" , tr [ \"address\" ]) truths . add_row ( \"Tel\" , \": \" , tr [ \"telephone\" ]) truths . add_row ( \"Faks\" , \": \" , tr [ \"fax\" ]) truths . add_row ( \"Web sayfas\u0131\" , \": \" , tr [ \"url\" ]) truths . add_row ( \"Kurulu\u015f\" , \": \" , tr [ \"founded\" ]) truths . add_row ( \"\u00dcyeler\" , \": \" , tr [ \"members\" ]) return Panel ( truths , title = \"[cyan][b]VER\u0130LER & GER\u00c7EKLER[/b][cyan]\" , box = box . SQUARE ) def get_main_left ( self ): left_top = self . get_main_left_top () left_bottom = self . get_main_left_bottom () return Panel ( Group ( left_top , left_bottom ), box = box . SIMPLE ) def get_main_middle ( self ): data = self . scrapper . matches next_matches = data [ \"matches\" ][: 6 ] items = [] for each in next_matches : matches = Table . grid ( expand = True ) matches . add_column () matches . add_column ( justify = \"center\" ) matches . add_column () matches . add_row ( \"\" , each [ \"competition\" ][ \"label\" ], \"\" ) matches . add_row ( \"\" , datetime . fromtimestamp ( each [ \"match\" ][ \"time\" ]) . strftime ( \" %d .%m.%Y %A - %H:%M\" ), \"\" ) matches . add_row ( Align . left ( data [ \"teams\" ][ str ( each [ \"match\" ][ \"home\" ])][ \"name\" ]), each [ \"match\" ][ \"result\" ], Align . right ( data [ \"teams\" ][ str ( each [ \"match\" ][ \"away\" ])][ \"name\" ]), ) items . append ( Panel ( matches , padding = ( 0 , 3 ), box = box . HORIZONTALS )) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]SONRAK\u0130 KAR\u015eILA\u015eMALAR[/b][/cyan]\" ), box = box . SIMPLE ) def get_main_right ( self ): items = [] for each in self . scrapper . rumors [: 4 ]: rumors = Table . grid ( expand = True ) rumors . add_column () rumors . add_column ( justify = \"center\" ) rumors . add_column () rumors . add_row ( \"\" , each [ \"player\" ][ \"name\" ], \"\" , style = \"bold\" ) rumors . add_row ( \"Ya\u015f\" , \": \" , str ( each [ \"player\" ][ \"age\" ])) rumors . add_row ( \"Mevki\" , \": \" , each [ \"player\" ][ \"position\" ]) rumors . add_row ( \"Piyasa de\u011feri\" , \": \" , each [ \"player\" ][ \"marketValue\" ]) rumors . add_row ( each [ \"team1\" ][ \"name\" ], \">> \" , each [ \"team2\" ][ \"name\" ], style = \"bold italic\" ) items . append ( Panel ( rumors , padding = ( 0 , 3 ), box = box . HORIZONTALS ), ) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]G\u00dcNCEL S\u00d6YLENT\u0130LER[/b][/cyan]\" ), box = box . SIMPLE ) @staticmethod def get_footer (): table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS ) class Footballers : def __init__ ( self ): self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"main\" , ratio = 24 ), Layout ( name = \"footer\" , ratio = 2 ), ) def setup ( self ): self . layout [ \"main\" ] . update ( self . get_main ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ): with Live ( self . layout , screen = True ): while True : sleep ( 1 ) @staticmethod def get_footer (): table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS ) def get_main ( self ): standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Age\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Market Value\" ) for i in range ( 0 , len ( self . scrapper . players [ \"Player\" ]), 1 ): standings . add_row ( self . scrapper . players [ \"Player\" ][ i ], self . scrapper . players [ \"Age\" ][ i ] , self . scrapper . players [ \"Position\" ][ i ], self . scrapper . players [ \"Market Value\" ][ i ]) return Panel ( standings , title = \"[cyan][b]Trabzonspor Squad[/b][/cyan]\" , box = box . SQUARE ) class Stats : def __init__ ( self ): self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"main\" , ratio = 10 ), Layout ( name = \"footer\" , ratio = 2 ), ) self . layout [ \"main\" ] . split_row ( Layout ( name = \"main-left\" , ratio = 1 ), Layout ( name = \"main-right\" , ratio = 1 ) ) def setup ( self ): self . layout [ \"main-left\" ] . update ( self . get_main_left_stats ()) self . layout [ \"main-right\" ] . update ( self . get_main_right_stats ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ): with Live ( self . layout , screen = True ): while True : sleep ( 1 ) def get_main_left_stats ( self ): standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Goals\" ) for i in range ( 0 , len ( self . scrapper . goals [ \"Player\" ]), 1 ): standings . add_row ( self . scrapper . goals [ \"Player\" ][ i ], self . scrapper . goals [ \"Position\" ][ i ], self . scrapper . goals [ \"Goals\" ][ i ]) return Panel ( standings , title = \"[cyan][b]TOP GOALSCORERS[/b][/cyan]\" , box = box . SQUARE ) def get_main_right_stats ( self ): standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Assists\" ) for i in range ( 0 , len ( self . scrapper . assists [ \"Player\" ]), 1 ): standings . add_row ( self . scrapper . assists [ \"Player\" ][ i ], self . scrapper . assists [ \"Position\" ][ i ], self . scrapper . assists [ \"Assists\" ][ i ]) return Panel ( standings , title = \"[cyan][b]MOST ASSISTS[/b][/cyan]\" , box = box . SQUARE ) def get_footer ( self ): table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS ) Classes Application class Application ( ) View Source class Application : def __init__ ( self ) : self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"header\" , ratio = 3 ), Layout ( name = \"main\" , ratio = 12 ), Layout ( name = \"footer\" , ratio = 1 ), ) self . layout [ \"header\" ] . split_row ( Layout ( name = \"header-left\" , ratio = 1 ), Layout ( name = \"header-middle\" , ratio = 3 ), Layout ( name = \"header-right\" , ratio = 1 ), ) self . layout [ \"main\" ] . split_row ( Layout ( name = \"main-left\" , ratio = 1 ), Layout ( name = \"main-middle\" , ratio = 1 ), Layout ( name = \"main-right\" , ratio = 1 ) ) def setup ( self ) : self . layout [ \"header-left\" ] . update ( self . get_header_left ()) self . layout [ \"header-middle\" ] . update ( self . get_header_middle ()) self . layout [ \"header-right\" ] . update ( self . get_header_right ()) self . layout [ \"main-left\" ] . update ( self . get_main_left ()) self . layout [ \"main-middle\" ] . update ( self . get_main_middle ()) self . layout [ \"main-right\" ] . update ( self . get_main_right ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 ) def get_header_left ( self ) : cups = Table . grid ( expand = True ) cups . add_column ( style = \"bold\" ) cups . add_column () cups . add_column () for count , title in self . scrapper . cups : cups . add_row ( count , \" \" , title ) return Panel ( Align . center ( cups , vertical = \"middle\" )) @staticmethod def get_header_middle () : logo = Group ( Align . center ( \":star:\\n\" ), Align . center ( \"[dark_red]TRABZON[/dark_red][dodger_blue1]SPOR[/dodger_blue1]\\n\" ), Align . center ( \"1967\" ), ) return Panel ( Align . center ( logo , vertical = \"middle\" ), style = \"bold\" , padding = 1 ) def get_header_right ( self ) : return Panel ( Align . center ( f \"Kadro de\u011feri\\n[b]{self.scrapper.team_value}[/b]\" , vertical = \"middle\" )) def get_main_left_top ( self ) : standings = Table ( expand = True , box = box . SIMPLE ) standings . add_column ( header = \"#\" ) standings . add_column ( header = \"Kul\u00fcp\" ) standings . add_column ( header = \"Ma\u00e7lar\" ) standings . add_column ( header = \"+/-\" ) standings . add_column ( header = \"Puan\" ) for no , club , matches , average , points , highlight in self . scrapper . standings : style = \"u dodger_blue1 on dark_red\" if highlight else None standings . add_row ( no , club , matches , average , points , style = style ) return Panel ( standings , title = \"[cyan][b]TABLO KES\u0130T\u0130 S\u00dcPER L\u0130G[/b][/cyan]\" , box = box . SQUARE ) def get_main_left_bottom ( self ) : truths = Table . grid ( expand = True ) truths . add_column () truths . add_column () truths . add_column () tr = self . scrapper . truths truths . add_row ( \"Resmi kul\u00fcp ad\u0131\" , \": \" , tr [ \"legal_name\" ] ) truths . add_row ( \"Adres\" , \": \" , tr [ \"address\" ] ) truths . add_row ( \"Tel\" , \": \" , tr [ \"telephone\" ] ) truths . add_row ( \"Faks\" , \": \" , tr [ \"fax\" ] ) truths . add_row ( \"Web sayfas\u0131\" , \": \" , tr [ \"url\" ] ) truths . add_row ( \"Kurulu\u015f\" , \": \" , tr [ \"founded\" ] ) truths . add_row ( \"\u00dcyeler\" , \": \" , tr [ \"members\" ] ) return Panel ( truths , title = \"[cyan][b]VER\u0130LER & GER\u00c7EKLER[/b][cyan]\" , box = box . SQUARE ) def get_main_left ( self ) : left_top = self . get_main_left_top () left_bottom = self . get_main_left_bottom () return Panel ( Group ( left_top , left_bottom ), box = box . SIMPLE ) def get_main_middle ( self ) : data = self . scrapper . matches next_matches = data [ \"matches\" ][ :6 ] items = [] for each in next_matches : matches = Table . grid ( expand = True ) matches . add_column () matches . add_column ( justify = \"center\" ) matches . add_column () matches . add_row ( \"\" , each [ \"competition\" ][ \"label\" ] , \"\" ) matches . add_row ( \"\" , datetime . fromtimestamp ( each [ \"match\" ][ \"time\" ] ). strftime ( \"%d.%m.%Y %A - %H:%M\" ), \"\" ) matches . add_row ( Align . left ( data [ \"teams\" ][ str(each[\"match\" ][ \"home\" ] ) ] [ \"name\" ] ), each [ \"match\" ][ \"result\" ] , Align . right ( data [ \"teams\" ][ str(each[\"match\" ][ \"away\" ] ) ] [ \"name\" ] ), ) items . append ( Panel ( matches , padding = ( 0 , 3 ), box = box . HORIZONTALS )) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]SONRAK\u0130 KAR\u015eILA\u015eMALAR[/b][/cyan]\" ), box = box . SIMPLE ) def get_main_right ( self ) : items = [] for each in self . scrapper . rumors [ :4 ] : rumors = Table . grid ( expand = True ) rumors . add_column () rumors . add_column ( justify = \"center\" ) rumors . add_column () rumors . add_row ( \"\" , each [ \"player\" ][ \"name\" ] , \"\" , style = \"bold\" ) rumors . add_row ( \"Ya\u015f\" , \": \" , str ( each [ \"player\" ][ \"age\" ] )) rumors . add_row ( \"Mevki\" , \": \" , each [ \"player\" ][ \"position\" ] ) rumors . add_row ( \"Piyasa de\u011feri\" , \": \" , each [ \"player\" ][ \"marketValue\" ] ) rumors . add_row ( each [ \"team1\" ][ \"name\" ] , \">> \" , each [ \"team2\" ][ \"name\" ] , style = \"bold italic\" ) items . append ( Panel ( rumors , padding = ( 0 , 3 ), box = box . HORIZONTALS ), ) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]G\u00dcNCEL S\u00d6YLENT\u0130LER[/b][/cyan]\" ), box = box . SIMPLE ) @staticmethod def get_footer () : table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS ) Static methods get_footer def get_footer ( ) View Source @staticmethod def get_footer () : table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS ) get_header_middle def get_header_middle ( ) View Source @staticmethod def get_header_middle () : logo = Group ( Align . center ( \":star:\\n\" ), Align . center ( \"[dark_red]TRABZON[/dark_red][dodger_blue1]SPOR[/dodger_blue1]\\n\" ), Align . center ( \"1967\" ), ) return Panel ( Align . center ( logo , vertical = \"middle\" ), style = \"bold\" , padding = 1 ) Methods get_header_left def get_header_left ( self ) View Source def get_header_left(self): cups = Table.grid(expand=True) cups.add_column(style=\"bold\") cups.add_column() cups.add_column() for count, title in self.scrapper.cups: cups.add_row(count, \" \", title) return Panel(Align.center(cups, vertical=\"middle\")) get_header_right def get_header_right ( self ) View Source def get_header_right ( self ) : return Panel ( Align . center ( f \"Kadro de\u011feri\\n[b]{self.scrapper.team_value}[/b]\" , vertical = \"middle\" )) get_main_left def get_main_left ( self ) View Source def get_main_left(self): left_top = self.get_main_left_top() left_bottom = self.get_main_left_bottom() return Panel(Group(left_top, left_bottom), box=box.SIMPLE) get_main_left_bottom def get_main_left_bottom ( self ) View Source def get_main_left_bottom ( self ) : truths = Table . grid ( expand = True ) truths . add_column () truths . add_column () truths . add_column () tr = self . scrapper . truths truths . add_row ( \"Resmi kul\u00fcp ad\u0131\" , \": \" , tr [ \"legal_name\" ] ) truths . add_row ( \"Adres\" , \": \" , tr [ \"address\" ] ) truths . add_row ( \"Tel\" , \": \" , tr [ \"telephone\" ] ) truths . add_row ( \"Faks\" , \": \" , tr [ \"fax\" ] ) truths . add_row ( \"Web sayfas\u0131\" , \": \" , tr [ \"url\" ] ) truths . add_row ( \"Kurulu\u015f\" , \": \" , tr [ \"founded\" ] ) truths . add_row ( \"\u00dcyeler\" , \": \" , tr [ \"members\" ] ) return Panel ( truths , title = \"[cyan][b]VER\u0130LER & GER\u00c7EKLER[/b][cyan]\" , box = box . SQUARE ) get_main_left_top def get_main_left_top ( self ) View Source def get_main_left_top ( self ) : standings = Table ( expand = True , box = box . SIMPLE ) standings . add_column ( header = \"#\" ) standings . add_column ( header = \"Kul\u00fcp\" ) standings . add_column ( header = \"Ma\u00e7lar\" ) standings . add_column ( header = \"+/-\" ) standings . add_column ( header = \"Puan\" ) for no , club , matches , average , points , highlight in self . scrapper . standings : style = \"u dodger_blue1 on dark_red\" if highlight else None standings . add_row ( no , club , matches , average , points , style = style ) return Panel ( standings , title = \"[cyan][b]TABLO KES\u0130T\u0130 S\u00dcPER L\u0130G[/b][/cyan]\" , box = box . SQUARE ) get_main_middle def get_main_middle ( self ) View Source def get_main_middle ( self ) : data = self . scrapper . matches next_matches = data [ \"matches\" ][ :6 ] items = [] for each in next_matches : matches = Table . grid ( expand = True ) matches . add_column () matches . add_column ( justify = \"center\" ) matches . add_column () matches . add_row ( \"\" , each [ \"competition\" ][ \"label\" ] , \"\" ) matches . add_row ( \"\" , datetime . fromtimestamp ( each [ \"match\" ][ \"time\" ] ). strftime ( \"%d.%m.%Y %A - %H:%M\" ), \"\" ) matches . add_row ( Align . left ( data [ \"teams\" ][ str(each[\"match\" ][ \"home\" ] ) ] [ \"name\" ] ), each [ \"match\" ][ \"result\" ] , Align . right ( data [ \"teams\" ][ str(each[\"match\" ][ \"away\" ] ) ] [ \"name\" ] ), ) items . append ( Panel ( matches , padding = ( 0 , 3 ), box = box . HORIZONTALS )) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]SONRAK\u0130 KAR\u015eILA\u015eMALAR[/b][/cyan]\" ), box = box . SIMPLE ) get_main_right def get_main_right ( self ) View Source def get_main_right ( self ) : items = [] for each in self . scrapper . rumors [ :4 ] : rumors = Table . grid ( expand = True ) rumors . add_column () rumors . add_column ( justify = \"center\" ) rumors . add_column () rumors . add_row ( \"\" , each [ \"player\" ][ \"name\" ] , \"\" , style = \"bold\" ) rumors . add_row ( \"Ya\u015f\" , \": \" , str ( each [ \"player\" ][ \"age\" ] )) rumors . add_row ( \"Mevki\" , \": \" , each [ \"player\" ][ \"position\" ] ) rumors . add_row ( \"Piyasa de\u011feri\" , \": \" , each [ \"player\" ][ \"marketValue\" ] ) rumors . add_row ( each [ \"team1\" ][ \"name\" ] , \">> \" , each [ \"team2\" ][ \"name\" ] , style = \"bold italic\" ) items . append ( Panel ( rumors , padding = ( 0 , 3 ), box = box . HORIZONTALS ), ) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]G\u00dcNCEL S\u00d6YLENT\u0130LER[/b][/cyan]\" ), box = box . SIMPLE ) run def run ( self ) View Source def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 ) setup def setup ( self ) View Source def setup(self): self.layout[\"header-left\"].update(self.get_header_left()) self.layout[\"header-middle\"].update(self.get_header_middle()) self.layout[\"header-right\"].update(self.get_header_right()) self.layout[\"main-left\"].update(self.get_main_left()) self.layout[\"main-middle\"].update(self.get_main_middle()) self.layout[\"main-right\"].update(self.get_main_right()) self.layout[\"footer\"].update(self.get_footer()) Footballers class Footballers ( ) View Source class Footballers : def __init__ ( self ) : self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"main\" , ratio = 24 ), Layout ( name = \"footer\" , ratio = 2 ), ) def setup ( self ) : self . layout [ \"main\" ] . update ( self . get_main ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 ) @staticmethod def get_footer () : table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS ) def get_main ( self ) : standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Age\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Market Value\" ) for i in range ( 0 , len ( self . scrapper . players [ \"Player\" ] ), 1 ) : standings . add_row ( self . scrapper . players [ \"Player\" ][ i ] , self . scrapper . players [ \"Age\" ][ i ] , self . scrapper . players [ \"Position\" ][ i ] , self . scrapper . players [ \"Market Value\" ][ i ] ) return Panel ( standings , title = \"[cyan][b]Trabzonspor Squad[/b][/cyan]\" , box = box . SQUARE ) Static methods get_footer def get_footer ( ) View Source @staticmethod def get_footer () : table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS ) Methods get_main def get_main ( self ) View Source def get_main ( self ) : standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Age\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Market Value\" ) for i in range ( 0 , len ( self . scrapper . players [ \"Player\" ] ), 1 ) : standings . add_row ( self . scrapper . players [ \"Player\" ][ i ] , self . scrapper . players [ \"Age\" ][ i ] , self . scrapper . players [ \"Position\" ][ i ] , self . scrapper . players [ \"Market Value\" ][ i ] ) return Panel ( standings , title = \"[cyan][b]Trabzonspor Squad[/b][/cyan]\" , box = box . SQUARE ) run def run ( self ) View Source def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 ) setup def setup ( self ) View Source def setup(self): self.layout[\"main\"].update(self.get_main()) self.layout[\"footer\"].update(self.get_footer()) Stats class Stats ( ) View Source class Stats : def __init__ ( self ) : self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"main\" , ratio = 10 ), Layout ( name = \"footer\" , ratio = 2 ), ) self . layout [ \"main\" ] . split_row ( Layout ( name = \"main-left\" , ratio = 1 ), Layout ( name = \"main-right\" , ratio = 1 ) ) def setup ( self ) : self . layout [ \"main-left\" ] . update ( self . get_main_left_stats ()) self . layout [ \"main-right\" ] . update ( self . get_main_right_stats ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 ) def get_main_left_stats ( self ) : standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Goals\" ) for i in range ( 0 , len ( self . scrapper . goals [ \"Player\" ] ), 1 ) : standings . add_row ( self . scrapper . goals [ \"Player\" ][ i ] , self . scrapper . goals [ \"Position\" ][ i ] , self . scrapper . goals [ \"Goals\" ][ i ] ) return Panel ( standings , title = \"[cyan][b]TOP GOALSCORERS[/b][/cyan]\" , box = box . SQUARE ) def get_main_right_stats ( self ) : standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Assists\" ) for i in range ( 0 , len ( self . scrapper . assists [ \"Player\" ] ), 1 ) : standings . add_row ( self . scrapper . assists [ \"Player\" ][ i ] , self . scrapper . assists [ \"Position\" ][ i ] , self . scrapper . assists [ \"Assists\" ][ i ] ) return Panel ( standings , title = \"[cyan][b]MOST ASSISTS[/b][/cyan]\" , box = box . SQUARE ) def get_footer ( self ) : table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS ) Methods get_footer def get_footer ( self ) View Source def get_footer ( self ) : table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS ) get_main_left_stats def get_main_left_stats ( self ) View Source def get_main_left_stats ( self ) : standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Goals\" ) for i in range ( 0 , len ( self . scrapper . goals [ \"Player\" ] ), 1 ) : standings . add_row ( self . scrapper . goals [ \"Player\" ][ i ] , self . scrapper . goals [ \"Position\" ][ i ] , self . scrapper . goals [ \"Goals\" ][ i ] ) return Panel ( standings , title = \"[cyan][b]TOP GOALSCORERS[/b][/cyan]\" , box = box . SQUARE ) get_main_right_stats def get_main_right_stats ( self ) View Source def get_main_right_stats ( self ) : standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Assists\" ) for i in range ( 0 , len ( self . scrapper . assists [ \"Player\" ] ), 1 ) : standings . add_row ( self . scrapper . assists [ \"Player\" ][ i ] , self . scrapper . assists [ \"Position\" ][ i ] , self . scrapper . assists [ \"Assists\" ][ i ] ) return Panel ( standings , title = \"[cyan][b]MOST ASSISTS[/b][/cyan]\" , box = box . SQUARE ) run def run ( self ) View Source def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 ) setup def setup ( self ) View Source def setup(self): self.layout[\"main-left\"].update(self.get_main_left_stats()) self.layout[\"main-right\"].update(self.get_main_right_stats()) self.layout[\"footer\"].update(self.get_footer())","title":"Screen"},{"location":"reference/trabzonspor/screen/#module-trabzonsporscreen","text":"View Source from datetime import datetime from time import sleep from rich import box from rich.align import Align from rich.console import Group from rich.layout import Layout from rich.live import Live from rich.panel import Panel from rich.table import Table from rich.text import Text from .scrapper import Scraper class Application : def __init__ ( self ): self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"header\" , ratio = 3 ), Layout ( name = \"main\" , ratio = 12 ), Layout ( name = \"footer\" , ratio = 1 ), ) self . layout [ \"header\" ] . split_row ( Layout ( name = \"header-left\" , ratio = 1 ), Layout ( name = \"header-middle\" , ratio = 3 ), Layout ( name = \"header-right\" , ratio = 1 ), ) self . layout [ \"main\" ] . split_row ( Layout ( name = \"main-left\" , ratio = 1 ), Layout ( name = \"main-middle\" , ratio = 1 ), Layout ( name = \"main-right\" , ratio = 1 ) ) def setup ( self ): self . layout [ \"header-left\" ] . update ( self . get_header_left ()) self . layout [ \"header-middle\" ] . update ( self . get_header_middle ()) self . layout [ \"header-right\" ] . update ( self . get_header_right ()) self . layout [ \"main-left\" ] . update ( self . get_main_left ()) self . layout [ \"main-middle\" ] . update ( self . get_main_middle ()) self . layout [ \"main-right\" ] . update ( self . get_main_right ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ): with Live ( self . layout , screen = True ): while True : sleep ( 1 ) def get_header_left ( self ): cups = Table . grid ( expand = True ) cups . add_column ( style = \"bold\" ) cups . add_column () cups . add_column () for count , title in self . scrapper . cups : cups . add_row ( count , \" \" , title ) return Panel ( Align . center ( cups , vertical = \"middle\" )) @staticmethod def get_header_middle (): logo = Group ( Align . center ( \":star: \\n \" ), Align . center ( \"[dark_red]TRABZON[/dark_red][dodger_blue1]SPOR[/dodger_blue1] \\n \" ), Align . center ( \"1967\" ), ) return Panel ( Align . center ( logo , vertical = \"middle\" ), style = \"bold\" , padding = 1 ) def get_header_right ( self ): return Panel ( Align . center ( f \"Kadro de\u011feri \\n [b] { self . scrapper . team_value } [/b]\" , vertical = \"middle\" )) def get_main_left_top ( self ): standings = Table ( expand = True , box = box . SIMPLE ) standings . add_column ( header = \"#\" ) standings . add_column ( header = \"Kul\u00fcp\" ) standings . add_column ( header = \"Ma\u00e7lar\" ) standings . add_column ( header = \"+/-\" ) standings . add_column ( header = \"Puan\" ) for no , club , matches , average , points , highlight in self . scrapper . standings : style = \"u dodger_blue1 on dark_red\" if highlight else None standings . add_row ( no , club , matches , average , points , style = style ) return Panel ( standings , title = \"[cyan][b]TABLO KES\u0130T\u0130 S\u00dcPER L\u0130G[/b][/cyan]\" , box = box . SQUARE ) def get_main_left_bottom ( self ): truths = Table . grid ( expand = True ) truths . add_column () truths . add_column () truths . add_column () tr = self . scrapper . truths truths . add_row ( \"Resmi kul\u00fcp ad\u0131\" , \": \" , tr [ \"legal_name\" ]) truths . add_row ( \"Adres\" , \": \" , tr [ \"address\" ]) truths . add_row ( \"Tel\" , \": \" , tr [ \"telephone\" ]) truths . add_row ( \"Faks\" , \": \" , tr [ \"fax\" ]) truths . add_row ( \"Web sayfas\u0131\" , \": \" , tr [ \"url\" ]) truths . add_row ( \"Kurulu\u015f\" , \": \" , tr [ \"founded\" ]) truths . add_row ( \"\u00dcyeler\" , \": \" , tr [ \"members\" ]) return Panel ( truths , title = \"[cyan][b]VER\u0130LER & GER\u00c7EKLER[/b][cyan]\" , box = box . SQUARE ) def get_main_left ( self ): left_top = self . get_main_left_top () left_bottom = self . get_main_left_bottom () return Panel ( Group ( left_top , left_bottom ), box = box . SIMPLE ) def get_main_middle ( self ): data = self . scrapper . matches next_matches = data [ \"matches\" ][: 6 ] items = [] for each in next_matches : matches = Table . grid ( expand = True ) matches . add_column () matches . add_column ( justify = \"center\" ) matches . add_column () matches . add_row ( \"\" , each [ \"competition\" ][ \"label\" ], \"\" ) matches . add_row ( \"\" , datetime . fromtimestamp ( each [ \"match\" ][ \"time\" ]) . strftime ( \" %d .%m.%Y %A - %H:%M\" ), \"\" ) matches . add_row ( Align . left ( data [ \"teams\" ][ str ( each [ \"match\" ][ \"home\" ])][ \"name\" ]), each [ \"match\" ][ \"result\" ], Align . right ( data [ \"teams\" ][ str ( each [ \"match\" ][ \"away\" ])][ \"name\" ]), ) items . append ( Panel ( matches , padding = ( 0 , 3 ), box = box . HORIZONTALS )) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]SONRAK\u0130 KAR\u015eILA\u015eMALAR[/b][/cyan]\" ), box = box . SIMPLE ) def get_main_right ( self ): items = [] for each in self . scrapper . rumors [: 4 ]: rumors = Table . grid ( expand = True ) rumors . add_column () rumors . add_column ( justify = \"center\" ) rumors . add_column () rumors . add_row ( \"\" , each [ \"player\" ][ \"name\" ], \"\" , style = \"bold\" ) rumors . add_row ( \"Ya\u015f\" , \": \" , str ( each [ \"player\" ][ \"age\" ])) rumors . add_row ( \"Mevki\" , \": \" , each [ \"player\" ][ \"position\" ]) rumors . add_row ( \"Piyasa de\u011feri\" , \": \" , each [ \"player\" ][ \"marketValue\" ]) rumors . add_row ( each [ \"team1\" ][ \"name\" ], \">> \" , each [ \"team2\" ][ \"name\" ], style = \"bold italic\" ) items . append ( Panel ( rumors , padding = ( 0 , 3 ), box = box . HORIZONTALS ), ) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]G\u00dcNCEL S\u00d6YLENT\u0130LER[/b][/cyan]\" ), box = box . SIMPLE ) @staticmethod def get_footer (): table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS ) class Footballers : def __init__ ( self ): self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"main\" , ratio = 24 ), Layout ( name = \"footer\" , ratio = 2 ), ) def setup ( self ): self . layout [ \"main\" ] . update ( self . get_main ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ): with Live ( self . layout , screen = True ): while True : sleep ( 1 ) @staticmethod def get_footer (): table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS ) def get_main ( self ): standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Age\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Market Value\" ) for i in range ( 0 , len ( self . scrapper . players [ \"Player\" ]), 1 ): standings . add_row ( self . scrapper . players [ \"Player\" ][ i ], self . scrapper . players [ \"Age\" ][ i ] , self . scrapper . players [ \"Position\" ][ i ], self . scrapper . players [ \"Market Value\" ][ i ]) return Panel ( standings , title = \"[cyan][b]Trabzonspor Squad[/b][/cyan]\" , box = box . SQUARE ) class Stats : def __init__ ( self ): self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"main\" , ratio = 10 ), Layout ( name = \"footer\" , ratio = 2 ), ) self . layout [ \"main\" ] . split_row ( Layout ( name = \"main-left\" , ratio = 1 ), Layout ( name = \"main-right\" , ratio = 1 ) ) def setup ( self ): self . layout [ \"main-left\" ] . update ( self . get_main_left_stats ()) self . layout [ \"main-right\" ] . update ( self . get_main_right_stats ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ): with Live ( self . layout , screen = True ): while True : sleep ( 1 ) def get_main_left_stats ( self ): standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Goals\" ) for i in range ( 0 , len ( self . scrapper . goals [ \"Player\" ]), 1 ): standings . add_row ( self . scrapper . goals [ \"Player\" ][ i ], self . scrapper . goals [ \"Position\" ][ i ], self . scrapper . goals [ \"Goals\" ][ i ]) return Panel ( standings , title = \"[cyan][b]TOP GOALSCORERS[/b][/cyan]\" , box = box . SQUARE ) def get_main_right_stats ( self ): standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Assists\" ) for i in range ( 0 , len ( self . scrapper . assists [ \"Player\" ]), 1 ): standings . add_row ( self . scrapper . assists [ \"Player\" ][ i ], self . scrapper . assists [ \"Position\" ][ i ], self . scrapper . assists [ \"Assists\" ][ i ]) return Panel ( standings , title = \"[cyan][b]MOST ASSISTS[/b][/cyan]\" , box = box . SQUARE ) def get_footer ( self ): table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS )","title":"Module trabzonspor.screen"},{"location":"reference/trabzonspor/screen/#classes","text":"","title":"Classes"},{"location":"reference/trabzonspor/screen/#application","text":"class Application ( ) View Source class Application : def __init__ ( self ) : self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"header\" , ratio = 3 ), Layout ( name = \"main\" , ratio = 12 ), Layout ( name = \"footer\" , ratio = 1 ), ) self . layout [ \"header\" ] . split_row ( Layout ( name = \"header-left\" , ratio = 1 ), Layout ( name = \"header-middle\" , ratio = 3 ), Layout ( name = \"header-right\" , ratio = 1 ), ) self . layout [ \"main\" ] . split_row ( Layout ( name = \"main-left\" , ratio = 1 ), Layout ( name = \"main-middle\" , ratio = 1 ), Layout ( name = \"main-right\" , ratio = 1 ) ) def setup ( self ) : self . layout [ \"header-left\" ] . update ( self . get_header_left ()) self . layout [ \"header-middle\" ] . update ( self . get_header_middle ()) self . layout [ \"header-right\" ] . update ( self . get_header_right ()) self . layout [ \"main-left\" ] . update ( self . get_main_left ()) self . layout [ \"main-middle\" ] . update ( self . get_main_middle ()) self . layout [ \"main-right\" ] . update ( self . get_main_right ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 ) def get_header_left ( self ) : cups = Table . grid ( expand = True ) cups . add_column ( style = \"bold\" ) cups . add_column () cups . add_column () for count , title in self . scrapper . cups : cups . add_row ( count , \" \" , title ) return Panel ( Align . center ( cups , vertical = \"middle\" )) @staticmethod def get_header_middle () : logo = Group ( Align . center ( \":star:\\n\" ), Align . center ( \"[dark_red]TRABZON[/dark_red][dodger_blue1]SPOR[/dodger_blue1]\\n\" ), Align . center ( \"1967\" ), ) return Panel ( Align . center ( logo , vertical = \"middle\" ), style = \"bold\" , padding = 1 ) def get_header_right ( self ) : return Panel ( Align . center ( f \"Kadro de\u011feri\\n[b]{self.scrapper.team_value}[/b]\" , vertical = \"middle\" )) def get_main_left_top ( self ) : standings = Table ( expand = True , box = box . SIMPLE ) standings . add_column ( header = \"#\" ) standings . add_column ( header = \"Kul\u00fcp\" ) standings . add_column ( header = \"Ma\u00e7lar\" ) standings . add_column ( header = \"+/-\" ) standings . add_column ( header = \"Puan\" ) for no , club , matches , average , points , highlight in self . scrapper . standings : style = \"u dodger_blue1 on dark_red\" if highlight else None standings . add_row ( no , club , matches , average , points , style = style ) return Panel ( standings , title = \"[cyan][b]TABLO KES\u0130T\u0130 S\u00dcPER L\u0130G[/b][/cyan]\" , box = box . SQUARE ) def get_main_left_bottom ( self ) : truths = Table . grid ( expand = True ) truths . add_column () truths . add_column () truths . add_column () tr = self . scrapper . truths truths . add_row ( \"Resmi kul\u00fcp ad\u0131\" , \": \" , tr [ \"legal_name\" ] ) truths . add_row ( \"Adres\" , \": \" , tr [ \"address\" ] ) truths . add_row ( \"Tel\" , \": \" , tr [ \"telephone\" ] ) truths . add_row ( \"Faks\" , \": \" , tr [ \"fax\" ] ) truths . add_row ( \"Web sayfas\u0131\" , \": \" , tr [ \"url\" ] ) truths . add_row ( \"Kurulu\u015f\" , \": \" , tr [ \"founded\" ] ) truths . add_row ( \"\u00dcyeler\" , \": \" , tr [ \"members\" ] ) return Panel ( truths , title = \"[cyan][b]VER\u0130LER & GER\u00c7EKLER[/b][cyan]\" , box = box . SQUARE ) def get_main_left ( self ) : left_top = self . get_main_left_top () left_bottom = self . get_main_left_bottom () return Panel ( Group ( left_top , left_bottom ), box = box . SIMPLE ) def get_main_middle ( self ) : data = self . scrapper . matches next_matches = data [ \"matches\" ][ :6 ] items = [] for each in next_matches : matches = Table . grid ( expand = True ) matches . add_column () matches . add_column ( justify = \"center\" ) matches . add_column () matches . add_row ( \"\" , each [ \"competition\" ][ \"label\" ] , \"\" ) matches . add_row ( \"\" , datetime . fromtimestamp ( each [ \"match\" ][ \"time\" ] ). strftime ( \"%d.%m.%Y %A - %H:%M\" ), \"\" ) matches . add_row ( Align . left ( data [ \"teams\" ][ str(each[\"match\" ][ \"home\" ] ) ] [ \"name\" ] ), each [ \"match\" ][ \"result\" ] , Align . right ( data [ \"teams\" ][ str(each[\"match\" ][ \"away\" ] ) ] [ \"name\" ] ), ) items . append ( Panel ( matches , padding = ( 0 , 3 ), box = box . HORIZONTALS )) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]SONRAK\u0130 KAR\u015eILA\u015eMALAR[/b][/cyan]\" ), box = box . SIMPLE ) def get_main_right ( self ) : items = [] for each in self . scrapper . rumors [ :4 ] : rumors = Table . grid ( expand = True ) rumors . add_column () rumors . add_column ( justify = \"center\" ) rumors . add_column () rumors . add_row ( \"\" , each [ \"player\" ][ \"name\" ] , \"\" , style = \"bold\" ) rumors . add_row ( \"Ya\u015f\" , \": \" , str ( each [ \"player\" ][ \"age\" ] )) rumors . add_row ( \"Mevki\" , \": \" , each [ \"player\" ][ \"position\" ] ) rumors . add_row ( \"Piyasa de\u011feri\" , \": \" , each [ \"player\" ][ \"marketValue\" ] ) rumors . add_row ( each [ \"team1\" ][ \"name\" ] , \">> \" , each [ \"team2\" ][ \"name\" ] , style = \"bold italic\" ) items . append ( Panel ( rumors , padding = ( 0 , 3 ), box = box . HORIZONTALS ), ) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]G\u00dcNCEL S\u00d6YLENT\u0130LER[/b][/cyan]\" ), box = box . SIMPLE ) @staticmethod def get_footer () : table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS )","title":"Application"},{"location":"reference/trabzonspor/screen/#static-methods","text":"","title":"Static methods"},{"location":"reference/trabzonspor/screen/#get_footer","text":"def get_footer ( ) View Source @staticmethod def get_footer () : table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS )","title":"get_footer"},{"location":"reference/trabzonspor/screen/#get_header_middle","text":"def get_header_middle ( ) View Source @staticmethod def get_header_middle () : logo = Group ( Align . center ( \":star:\\n\" ), Align . center ( \"[dark_red]TRABZON[/dark_red][dodger_blue1]SPOR[/dodger_blue1]\\n\" ), Align . center ( \"1967\" ), ) return Panel ( Align . center ( logo , vertical = \"middle\" ), style = \"bold\" , padding = 1 )","title":"get_header_middle"},{"location":"reference/trabzonspor/screen/#methods","text":"","title":"Methods"},{"location":"reference/trabzonspor/screen/#get_header_left","text":"def get_header_left ( self ) View Source def get_header_left(self): cups = Table.grid(expand=True) cups.add_column(style=\"bold\") cups.add_column() cups.add_column() for count, title in self.scrapper.cups: cups.add_row(count, \" \", title) return Panel(Align.center(cups, vertical=\"middle\"))","title":"get_header_left"},{"location":"reference/trabzonspor/screen/#get_header_right","text":"def get_header_right ( self ) View Source def get_header_right ( self ) : return Panel ( Align . center ( f \"Kadro de\u011feri\\n[b]{self.scrapper.team_value}[/b]\" , vertical = \"middle\" ))","title":"get_header_right"},{"location":"reference/trabzonspor/screen/#get_main_left","text":"def get_main_left ( self ) View Source def get_main_left(self): left_top = self.get_main_left_top() left_bottom = self.get_main_left_bottom() return Panel(Group(left_top, left_bottom), box=box.SIMPLE)","title":"get_main_left"},{"location":"reference/trabzonspor/screen/#get_main_left_bottom","text":"def get_main_left_bottom ( self ) View Source def get_main_left_bottom ( self ) : truths = Table . grid ( expand = True ) truths . add_column () truths . add_column () truths . add_column () tr = self . scrapper . truths truths . add_row ( \"Resmi kul\u00fcp ad\u0131\" , \": \" , tr [ \"legal_name\" ] ) truths . add_row ( \"Adres\" , \": \" , tr [ \"address\" ] ) truths . add_row ( \"Tel\" , \": \" , tr [ \"telephone\" ] ) truths . add_row ( \"Faks\" , \": \" , tr [ \"fax\" ] ) truths . add_row ( \"Web sayfas\u0131\" , \": \" , tr [ \"url\" ] ) truths . add_row ( \"Kurulu\u015f\" , \": \" , tr [ \"founded\" ] ) truths . add_row ( \"\u00dcyeler\" , \": \" , tr [ \"members\" ] ) return Panel ( truths , title = \"[cyan][b]VER\u0130LER & GER\u00c7EKLER[/b][cyan]\" , box = box . SQUARE )","title":"get_main_left_bottom"},{"location":"reference/trabzonspor/screen/#get_main_left_top","text":"def get_main_left_top ( self ) View Source def get_main_left_top ( self ) : standings = Table ( expand = True , box = box . SIMPLE ) standings . add_column ( header = \"#\" ) standings . add_column ( header = \"Kul\u00fcp\" ) standings . add_column ( header = \"Ma\u00e7lar\" ) standings . add_column ( header = \"+/-\" ) standings . add_column ( header = \"Puan\" ) for no , club , matches , average , points , highlight in self . scrapper . standings : style = \"u dodger_blue1 on dark_red\" if highlight else None standings . add_row ( no , club , matches , average , points , style = style ) return Panel ( standings , title = \"[cyan][b]TABLO KES\u0130T\u0130 S\u00dcPER L\u0130G[/b][/cyan]\" , box = box . SQUARE )","title":"get_main_left_top"},{"location":"reference/trabzonspor/screen/#get_main_middle","text":"def get_main_middle ( self ) View Source def get_main_middle ( self ) : data = self . scrapper . matches next_matches = data [ \"matches\" ][ :6 ] items = [] for each in next_matches : matches = Table . grid ( expand = True ) matches . add_column () matches . add_column ( justify = \"center\" ) matches . add_column () matches . add_row ( \"\" , each [ \"competition\" ][ \"label\" ] , \"\" ) matches . add_row ( \"\" , datetime . fromtimestamp ( each [ \"match\" ][ \"time\" ] ). strftime ( \"%d.%m.%Y %A - %H:%M\" ), \"\" ) matches . add_row ( Align . left ( data [ \"teams\" ][ str(each[\"match\" ][ \"home\" ] ) ] [ \"name\" ] ), each [ \"match\" ][ \"result\" ] , Align . right ( data [ \"teams\" ][ str(each[\"match\" ][ \"away\" ] ) ] [ \"name\" ] ), ) items . append ( Panel ( matches , padding = ( 0 , 3 ), box = box . HORIZONTALS )) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]SONRAK\u0130 KAR\u015eILA\u015eMALAR[/b][/cyan]\" ), box = box . SIMPLE )","title":"get_main_middle"},{"location":"reference/trabzonspor/screen/#get_main_right","text":"def get_main_right ( self ) View Source def get_main_right ( self ) : items = [] for each in self . scrapper . rumors [ :4 ] : rumors = Table . grid ( expand = True ) rumors . add_column () rumors . add_column ( justify = \"center\" ) rumors . add_column () rumors . add_row ( \"\" , each [ \"player\" ][ \"name\" ] , \"\" , style = \"bold\" ) rumors . add_row ( \"Ya\u015f\" , \": \" , str ( each [ \"player\" ][ \"age\" ] )) rumors . add_row ( \"Mevki\" , \": \" , each [ \"player\" ][ \"position\" ] ) rumors . add_row ( \"Piyasa de\u011feri\" , \": \" , each [ \"player\" ][ \"marketValue\" ] ) rumors . add_row ( each [ \"team1\" ][ \"name\" ] , \">> \" , each [ \"team2\" ][ \"name\" ] , style = \"bold italic\" ) items . append ( Panel ( rumors , padding = ( 0 , 3 ), box = box . HORIZONTALS ), ) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]G\u00dcNCEL S\u00d6YLENT\u0130LER[/b][/cyan]\" ), box = box . SIMPLE )","title":"get_main_right"},{"location":"reference/trabzonspor/screen/#run","text":"def run ( self ) View Source def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 )","title":"run"},{"location":"reference/trabzonspor/screen/#setup","text":"def setup ( self ) View Source def setup(self): self.layout[\"header-left\"].update(self.get_header_left()) self.layout[\"header-middle\"].update(self.get_header_middle()) self.layout[\"header-right\"].update(self.get_header_right()) self.layout[\"main-left\"].update(self.get_main_left()) self.layout[\"main-middle\"].update(self.get_main_middle()) self.layout[\"main-right\"].update(self.get_main_right()) self.layout[\"footer\"].update(self.get_footer())","title":"setup"},{"location":"reference/trabzonspor/screen/#footballers","text":"class Footballers ( ) View Source class Footballers : def __init__ ( self ) : self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"main\" , ratio = 24 ), Layout ( name = \"footer\" , ratio = 2 ), ) def setup ( self ) : self . layout [ \"main\" ] . update ( self . get_main ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 ) @staticmethod def get_footer () : table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS ) def get_main ( self ) : standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Age\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Market Value\" ) for i in range ( 0 , len ( self . scrapper . players [ \"Player\" ] ), 1 ) : standings . add_row ( self . scrapper . players [ \"Player\" ][ i ] , self . scrapper . players [ \"Age\" ][ i ] , self . scrapper . players [ \"Position\" ][ i ] , self . scrapper . players [ \"Market Value\" ][ i ] ) return Panel ( standings , title = \"[cyan][b]Trabzonspor Squad[/b][/cyan]\" , box = box . SQUARE )","title":"Footballers"},{"location":"reference/trabzonspor/screen/#static-methods_1","text":"","title":"Static methods"},{"location":"reference/trabzonspor/screen/#get_footer_1","text":"def get_footer ( ) View Source @staticmethod def get_footer () : table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS )","title":"get_footer"},{"location":"reference/trabzonspor/screen/#methods_1","text":"","title":"Methods"},{"location":"reference/trabzonspor/screen/#get_main","text":"def get_main ( self ) View Source def get_main ( self ) : standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Age\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Market Value\" ) for i in range ( 0 , len ( self . scrapper . players [ \"Player\" ] ), 1 ) : standings . add_row ( self . scrapper . players [ \"Player\" ][ i ] , self . scrapper . players [ \"Age\" ][ i ] , self . scrapper . players [ \"Position\" ][ i ] , self . scrapper . players [ \"Market Value\" ][ i ] ) return Panel ( standings , title = \"[cyan][b]Trabzonspor Squad[/b][/cyan]\" , box = box . SQUARE )","title":"get_main"},{"location":"reference/trabzonspor/screen/#run_1","text":"def run ( self ) View Source def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 )","title":"run"},{"location":"reference/trabzonspor/screen/#setup_1","text":"def setup ( self ) View Source def setup(self): self.layout[\"main\"].update(self.get_main()) self.layout[\"footer\"].update(self.get_footer())","title":"setup"},{"location":"reference/trabzonspor/screen/#stats","text":"class Stats ( ) View Source class Stats : def __init__ ( self ) : self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"main\" , ratio = 10 ), Layout ( name = \"footer\" , ratio = 2 ), ) self . layout [ \"main\" ] . split_row ( Layout ( name = \"main-left\" , ratio = 1 ), Layout ( name = \"main-right\" , ratio = 1 ) ) def setup ( self ) : self . layout [ \"main-left\" ] . update ( self . get_main_left_stats ()) self . layout [ \"main-right\" ] . update ( self . get_main_right_stats ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 ) def get_main_left_stats ( self ) : standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Goals\" ) for i in range ( 0 , len ( self . scrapper . goals [ \"Player\" ] ), 1 ) : standings . add_row ( self . scrapper . goals [ \"Player\" ][ i ] , self . scrapper . goals [ \"Position\" ][ i ] , self . scrapper . goals [ \"Goals\" ][ i ] ) return Panel ( standings , title = \"[cyan][b]TOP GOALSCORERS[/b][/cyan]\" , box = box . SQUARE ) def get_main_right_stats ( self ) : standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Assists\" ) for i in range ( 0 , len ( self . scrapper . assists [ \"Player\" ] ), 1 ) : standings . add_row ( self . scrapper . assists [ \"Player\" ][ i ] , self . scrapper . assists [ \"Position\" ][ i ] , self . scrapper . assists [ \"Assists\" ][ i ] ) return Panel ( standings , title = \"[cyan][b]MOST ASSISTS[/b][/cyan]\" , box = box . SQUARE ) def get_footer ( self ) : table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS )","title":"Stats"},{"location":"reference/trabzonspor/screen/#methods_2","text":"","title":"Methods"},{"location":"reference/trabzonspor/screen/#get_footer_2","text":"def get_footer ( self ) View Source def get_footer ( self ) : table = Table . grid ( expand = True ) table . add_column () table . add_column () table . add_column () table . add_row ( \"quit\" , \": \" , \"CTRL + C\" ) table . add_row ( \"credit\" , \": \" , Text ( \"@ofaruk89\" , style = \"link https://github.com/ofaruk89\" )) return Panel ( table , box = box . HORIZONTALS )","title":"get_footer"},{"location":"reference/trabzonspor/screen/#get_main_left_stats","text":"def get_main_left_stats ( self ) View Source def get_main_left_stats ( self ) : standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Goals\" ) for i in range ( 0 , len ( self . scrapper . goals [ \"Player\" ] ), 1 ) : standings . add_row ( self . scrapper . goals [ \"Player\" ][ i ] , self . scrapper . goals [ \"Position\" ][ i ] , self . scrapper . goals [ \"Goals\" ][ i ] ) return Panel ( standings , title = \"[cyan][b]TOP GOALSCORERS[/b][/cyan]\" , box = box . SQUARE )","title":"get_main_left_stats"},{"location":"reference/trabzonspor/screen/#get_main_right_stats","text":"def get_main_right_stats ( self ) View Source def get_main_right_stats ( self ) : standings = Table ( expand = True ) standings . add_column ( header = \"Player\" ) standings . add_column ( header = \"Position\" ) standings . add_column ( header = \"Assists\" ) for i in range ( 0 , len ( self . scrapper . assists [ \"Player\" ] ), 1 ) : standings . add_row ( self . scrapper . assists [ \"Player\" ][ i ] , self . scrapper . assists [ \"Position\" ][ i ] , self . scrapper . assists [ \"Assists\" ][ i ] ) return Panel ( standings , title = \"[cyan][b]MOST ASSISTS[/b][/cyan]\" , box = box . SQUARE )","title":"get_main_right_stats"},{"location":"reference/trabzonspor/screen/#run_2","text":"def run ( self ) View Source def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 )","title":"run"},{"location":"reference/trabzonspor/screen/#setup_2","text":"def setup ( self ) View Source def setup(self): self.layout[\"main-left\"].update(self.get_main_left_stats()) self.layout[\"main-right\"].update(self.get_main_right_stats()) self.layout[\"footer\"].update(self.get_footer())","title":"setup"}]}